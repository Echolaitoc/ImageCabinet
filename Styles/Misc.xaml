<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ImageCabinet"
                    xmlns:ui="clr-namespace:ImageCabinet.UIHelper">

    <Style x:Key="FlatButton" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <ui:BrushToTransmittantBrushConverter x:Key="brushToTransmittent"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Self}, Converter={StaticResource brushToTransmittent}, ConverterParameter=0.2}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CaretBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{TemplateBinding Background}" CornerRadius="2">
                        <ScrollViewer x:Name="PART_ContentHost" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatCheckBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <ContentControl x:Name="CheckBoxImage" Foreground="{TemplateBinding Foreground}" Content="{ui:Icon checkbox-blank-outline, 20}" VerticalAlignment="Center"/>
                        <ContentPresenter x:Name="CheckBoxLabel" Margin="4,0,0,0" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckBoxImage" Property="Content" Value="{ui:Icon checkbox-blank-outline, 20}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckBoxImage" Property="Content" Value="{ui:Icon checkbox-marked, 20}"/>
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="CheckBoxLabel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:TagButton}">
        <Style.Resources>
            <ui:MultiplicationConverter x:Key="multiply"/>
            <ui:BrushToTransmittantBrushConverter x:Key="brushToTransmittent"/>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="8,4,16,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TagButton}">
                    <Grid>
                        <Grid.ToolTip>
                            <TextBlock Text="{TemplateBinding ToolTipText}"/>
                        </Grid.ToolTip>
                        <Border x:Name="BackgroundBorder" BorderThickness="1" CornerRadius="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource multiply}, ConverterParameter=0.5}" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource brushToTransmittent}, ConverterParameter=0.9}"/>
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                            <Image Source="{TemplateBinding Icon}" Width="20" Height="20" Margin="0,0,4,0" VerticalAlignment="Center">
                                <Image.Effect>
                                    <ui:RecolorEffect Color="{Binding Foreground.Color, RelativeSource={RelativeSource TemplatedParent}, FallbackValue={StaticResource DefaultForegroundColor}}"/>
                                </Image.Effect>
                            </Image>
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource brushToTransmittent}, ConverterParameter=0.8}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentFilterMode, RelativeSource={RelativeSource Self}}" Value="{x:Static local:TagButton+FilterMode.Include}">
                <Setter Property="Background" Value="LightGreen"/>
                <Setter Property="Icon" Value="{ui:Icon tag-check, 20, ForceProvideImageSource=True}"/>
                <Setter Property="ToolTipText" Value="Show only images with this tag"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentFilterMode, RelativeSource={RelativeSource Self}}" Value="{x:Static local:TagButton+FilterMode.Exclude}">
                <Setter Property="Background" Value="LightPink"/>
                <Setter Property="Icon" Value="{ui:Icon tag-off-outline, 20, ForceProvideImageSource=True}"/>
                <Setter Property="ToolTipText" Value="Show only images without this tag"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentFilterMode, RelativeSource={RelativeSource Self}}" Value="{x:Static local:TagButton+FilterMode.None}">
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Icon" Value="{ui:Icon tag-outline, 20, ForceProvideImageSource=True}"/>
                <Setter Property="ToolTipText" Value="Show images regardless of this tag"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>